# Generated by Django 4.1.4 on 2023-07-05 18:30

import ckeditor_uploader.fields
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Basket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=10000)),
                ('date', models.DateTimeField(default=datetime.datetime(2023, 7, 5, 18, 30, 29, 213726, tzinfo=datetime.timezone.utc))),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Goods',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('price', models.IntegerField()),
                ('url', models.SlugField()),
                ('charecterist', ckeditor_uploader.fields.RichTextUploadingField()),
                ('delivery', models.BooleanField(default=False)),
                ('amount', models.IntegerField()),
                ('image', models.ImageField(upload_to='static/img')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assess', models.IntegerField()),
                ('comment', models.TextField()),
                ('date', models.DateTimeField(default=datetime.datetime(2023, 7, 5, 18, 30, 29, 213726, tzinfo=datetime.timezone.utc))),
                ('good', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='realization.goods')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='BasketItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=0)),
                ('basket', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='realization.basket')),
                ('goods', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='realization.goods')),
            ],
        ),
        migrations.AddField(
            model_name='basket',
            name='items',
            field=models.ManyToManyField(null=True, through='realization.BasketItems', to='realization.goods'),
        ),
        migrations.AddField(
            model_name='basket',
            name='user',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
